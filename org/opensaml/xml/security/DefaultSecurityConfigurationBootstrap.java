// 
// Decompiled by Procyon v0.5.36
// 

package org.opensaml.xml.security;

import org.opensaml.xml.security.keyinfo.KeyInfoGeneratorManager;
import org.opensaml.xml.security.keyinfo.KeyInfoGeneratorFactory;
import org.opensaml.xml.security.x509.X509KeyInfoGeneratorFactory;
import org.opensaml.xml.security.credential.BasicKeyInfoGeneratorFactory;
import org.opensaml.xml.security.keyinfo.NamedKeyInfoGeneratorManager;
import org.opensaml.xml.security.keyinfo.KeyInfoCredentialResolver;
import java.util.List;
import org.opensaml.xml.security.keyinfo.BasicProviderKeyInfoCredentialResolver;
import org.opensaml.xml.security.keyinfo.provider.InlineX509DataProvider;
import org.opensaml.xml.security.keyinfo.provider.DSAKeyValueProvider;
import org.opensaml.xml.security.keyinfo.provider.RSAKeyValueProvider;
import org.opensaml.xml.security.keyinfo.KeyInfoProvider;
import java.util.ArrayList;

public class DefaultSecurityConfigurationBootstrap
{
    protected DefaultSecurityConfigurationBootstrap() {
    }
    
    public static BasicSecurityConfiguration buildDefaultConfig() {
        final BasicSecurityConfiguration config = new BasicSecurityConfiguration();
        populateSignatureParams(config);
        populateEncryptionParams(config);
        populateKeyInfoCredentialResolverParams(config);
        populateKeyInfoGeneratorManager(config);
        populateKeyParams(config);
        return config;
    }
    
    protected static void populateSignatureParams(final BasicSecurityConfiguration config) {
        config.registerSignatureAlgorithmURI("RSA", "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
        config.registerSignatureAlgorithmURI("DSA", "http://www.w3.org/2000/09/xmldsig#dsa-sha1");
        config.registerSignatureAlgorithmURI("ECDSA", "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1");
        config.registerSignatureAlgorithmURI("AES", "http://www.w3.org/2000/09/xmldsig#hmac-sha1");
        config.registerSignatureAlgorithmURI("DESede", "http://www.w3.org/2000/09/xmldsig#hmac-sha1");
        config.setSignatureCanonicalizationAlgorithm("http://www.w3.org/2001/10/xml-exc-c14n#");
        config.setSignatureHMACOutputLength(null);
        config.setSignatureReferenceDigestMethod("http://www.w3.org/2000/09/xmldsig#sha1");
    }
    
    protected static void populateEncryptionParams(final BasicSecurityConfiguration config) {
        config.registerDataEncryptionAlgorithmURI("AES", 128, "http://www.w3.org/2001/04/xmlenc#aes128-cbc");
        config.registerDataEncryptionAlgorithmURI("AES", 192, "http://www.w3.org/2001/04/xmlenc#aes192-cbc");
        config.registerDataEncryptionAlgorithmURI("AES", 256, "http://www.w3.org/2001/04/xmlenc#aes256-cbc");
        config.registerDataEncryptionAlgorithmURI("DESede", 168, "http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
        config.registerDataEncryptionAlgorithmURI("DESede", 192, "http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
        config.registerKeyTransportEncryptionAlgorithmURI("RSA", null, "AES", "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
        config.registerKeyTransportEncryptionAlgorithmURI("RSA", null, "DESede", "http://www.w3.org/2001/04/xmlenc#rsa-1_5");
        config.registerKeyTransportEncryptionAlgorithmURI("AES", 128, null, "http://www.w3.org/2001/04/xmlenc#kw-aes128");
        config.registerKeyTransportEncryptionAlgorithmURI("AES", 192, null, "http://www.w3.org/2001/04/xmlenc#kw-aes192");
        config.registerKeyTransportEncryptionAlgorithmURI("AES", 256, null, "http://www.w3.org/2001/04/xmlenc#kw-aes256");
        config.registerKeyTransportEncryptionAlgorithmURI("DESede", 168, null, "http://www.w3.org/2001/04/xmlenc#kw-tripledes");
        config.registerKeyTransportEncryptionAlgorithmURI("DESede", 192, null, "http://www.w3.org/2001/04/xmlenc#kw-tripledes");
        config.setAutoGeneratedDataEncryptionKeyAlgorithmURI("http://www.w3.org/2001/04/xmlenc#aes128-cbc");
    }
    
    protected static void populateKeyInfoCredentialResolverParams(final BasicSecurityConfiguration config) {
        final ArrayList<KeyInfoProvider> providers = new ArrayList<KeyInfoProvider>();
        providers.add(new RSAKeyValueProvider());
        providers.add(new DSAKeyValueProvider());
        providers.add(new InlineX509DataProvider());
        final KeyInfoCredentialResolver resolver = new BasicProviderKeyInfoCredentialResolver(providers);
        config.setDefaultKeyInfoCredentialResolver(resolver);
    }
    
    protected static void populateKeyInfoGeneratorManager(final BasicSecurityConfiguration config) {
        final NamedKeyInfoGeneratorManager namedManager = new NamedKeyInfoGeneratorManager();
        config.setKeyInfoGeneratorManager(namedManager);
        namedManager.setUseDefaultManager(true);
        final KeyInfoGeneratorManager defaultManager = namedManager.getDefaultManager();
        final BasicKeyInfoGeneratorFactory basicFactory = new BasicKeyInfoGeneratorFactory();
        basicFactory.setEmitPublicKeyValue(true);
        final X509KeyInfoGeneratorFactory x509Factory = new X509KeyInfoGeneratorFactory();
        x509Factory.setEmitEntityCertificate(true);
        defaultManager.registerFactory(basicFactory);
        defaultManager.registerFactory(x509Factory);
    }
    
    protected static void populateKeyParams(final BasicSecurityConfiguration config) {
    }
}
